/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package monroelabv17;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.stage.FileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Stephen R. Williams (c) 2014
 */
public class LabJFrame extends javax.swing.JFrame {

    private List<BoxKey> globalBoxkeys;

    /**
     * Creates new form LabJFrame
     */
    public LabJFrame() {
        try {
            initComponents();
            DefaultTableModel dtm = (DefaultTableModel) keyTable.getModel();
            dtm.setRowCount(500);
            keyTable.setModel(dtm);
            //subfunction loads seed fields and bci login information from config.txt
            loadConfig();
        } catch (IOException ex) {
            Logger.getLogger(LabJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        keyTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        UpdateButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        SendButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        balField = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        rateUsdField = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        keyNoField = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        totValBTCField = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        totValUSDField = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        rateBtcField = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        timeField = new javax.swing.JLabel();
        newAddrButton = new javax.swing.JButton();
        backupButton1 = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        keysTab = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        freqBox = new javax.swing.JComboBox();
        jLabel17 = new javax.swing.JLabel();
        denomButton1 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        serialNoField = new javax.swing.JTextField();
        oprNoField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        gpsLocXField = new javax.swing.JTextField();
        gpsLocYField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        gpsHeadField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        denomButton5 = new javax.swing.JToggleButton();
        SaveSeedButton = new javax.swing.JButton();
        seedDefaultsButton = new javax.swing.JButton();
        denomButton10 = new javax.swing.JToggleButton();
        denomButton50 = new javax.swing.JToggleButton();
        UnusedButton1 = new javax.swing.JToggleButton();
        denomButton20 = new javax.swing.JToggleButton();
        denomButton100 = new javax.swing.JToggleButton();
        jToggleButton6 = new javax.swing.JToggleButton();
        securityTab = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        identifierField = new javax.swing.JTextField();
        SaveLoginButton = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        bciPasswordField = new javax.swing.JTextField();
        bciPasswordField2 = new javax.swing.JTextField();
        prototypeAccountButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        backupButton2 = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Monroe Lab");
        setResizable(false);

        keyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Denomination", "Time", "Address", "Private key", "Balance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        keyTable.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(keyTable);
        keyTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (keyTable.getColumnModel().getColumnCount() > 0) {
            keyTable.getColumnModel().getColumn(0).setMinWidth(5);
            keyTable.getColumnModel().getColumn(0).setPreferredWidth(100);
            keyTable.getColumnModel().getColumn(0).setMaxWidth(500);
            keyTable.getColumnModel().getColumn(1).setMinWidth(5);
            keyTable.getColumnModel().getColumn(1).setPreferredWidth(110);
            keyTable.getColumnModel().getColumn(1).setMaxWidth(500);
            keyTable.getColumnModel().getColumn(4).setMinWidth(5);
            keyTable.getColumnModel().getColumn(4).setPreferredWidth(100);
            keyTable.getColumnModel().getColumn(4).setMaxWidth(500);
        }

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        UpdateButton.setText("Update");
        UpdateButton.setToolTipText("Updates the above values and generates private keys");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        jLabel10.setText("BTC");

        SendButton.setBackground(new java.awt.Color(230, 173, 173));
        SendButton.setText("Send");
        SendButton.setToolTipText("Sends funds from the wallet to the keys below");
        SendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Balance:");

        balField.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        balField.setText("0");

        jLabel8.setText("Rate:");

        rateUsdField.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        rateUsdField.setText("0");

        jLabel9.setText("USD/BTC");

        jLabel3.setText("No. of keys:");

        keyNoField.setText("0");

        jLabel12.setText("Total value:");

        totValBTCField.setText("0");

        jLabel13.setText("Total value:");

        totValUSDField.setText("0");

        jLabel11.setText("BTC");

        jLabel22.setText("USD");

        rateBtcField.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        rateBtcField.setText("0");

        jLabel14.setText("BTC/USD");

        jLabel16.setText("Rate:");

        jLabel23.setText("Time:");

        timeField.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        timeField.setText("0");

        newAddrButton.setText("Show Load-up Address");
        newAddrButton.setToolTipText("Generates a new address on the blockchain.info wallet");
        newAddrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAddrButtonActionPerformed(evt);
            }
        });

        backupButton1.setText("Backup");
        backupButton1.setToolTipText("Saves the generated keys to a local file");
        backupButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                            .addComponent(jLabel8)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(rateUsdField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(keyNoField)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(balField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(totValBTCField)
                                            .addComponent(totValUSDField)
                                            .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel22))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(UpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(backupButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SendButton, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(56, 56, 56)
                                        .addComponent(rateBtcField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel14))
                            .addComponent(jLabel23)
                            .addComponent(newAddrButton, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(balField)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(rateUsdField)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(rateBtcField)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(keyNoField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(totValBTCField)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(totValUSDField)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(timeField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(newAddrButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(UpdateButton)
                            .addComponent(backupButton1)))
                    .addComponent(SendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel15.setText("Frequency:");

        freqBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "60", "30", "20", "15", "12", "10", "6", "5", "4", "3", "2", "1" }));
        freqBox.setToolTipText("The number of keys generated for each denomination");

        jLabel17.setText("per hr.");

        denomButton1.setSelected(true);
        denomButton1.setText("$1");
        denomButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                denomButton1ActionPerformed(evt);
            }
        });

        jLabel1.setDisplayedMnemonic('S');
        jLabel1.setText("Serial Number:");

        serialNoField.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        serialNoField.setText("ff0154d4b792d4d69c62219f10");
        serialNoField.setToolTipText("Identifies the Monroe Box");
        serialNoField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serialNoFieldActionPerformed(evt);
            }
        });

        oprNoField.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        oprNoField.setText("ffffff");
        oprNoField.setToolTipText("Owner of the Monroe Box");
        oprNoField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oprNoFieldActionPerformed(evt);
            }
        });

        jLabel2.setDisplayedMnemonic('O');
        jLabel2.setText("Operator No.:");

        gpsLocXField.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        gpsLocXField.setText("ffffff");
        gpsLocXField.setToolTipText("Future implementation");
        gpsLocXField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gpsLocXFieldActionPerformed(evt);
            }
        });

        gpsLocYField.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        gpsLocYField.setText("ffffff");
        gpsLocYField.setToolTipText("Future implementation");
        gpsLocYField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gpsLocYFieldActionPerformed(evt);
            }
        });

        jLabel18.setText("GPS Loc X:");

        jLabel19.setText("GPS Loc Y:");

        gpsHeadField.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        gpsHeadField.setText("ff");
        gpsHeadField.setToolTipText("Future implementation");

        jLabel20.setText("GPS Heading:");

        denomButton5.setText("$5");
        denomButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                denomButton5ActionPerformed(evt);
            }
        });

        SaveSeedButton.setText("Save");
        SaveSeedButton.setToolTipText("Save seed and login information to local file");
        SaveSeedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveSeedButtonActionPerformed(evt);
            }
        });

        seedDefaultsButton.setText("Defaults");
        seedDefaultsButton.setToolTipText("Loads prototype defaults");
        seedDefaultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seedDefaultsButtonActionPerformed(evt);
            }
        });

        denomButton10.setText("$10");

        denomButton50.setText("$50");

        UnusedButton1.setText("Unused");
        UnusedButton1.setToolTipText("Future implementation");

        denomButton20.setText("$20");

        denomButton100.setText("$100");

        jToggleButton6.setText("Unused");
        jToggleButton6.setToolTipText("Future implementation");

        javax.swing.GroupLayout keysTabLayout = new javax.swing.GroupLayout(keysTab);
        keysTab.setLayout(keysTabLayout);
        keysTabLayout.setHorizontalGroup(
            keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keysTabLayout.createSequentialGroup()
                .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(keysTabLayout.createSequentialGroup()
                        .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, keysTabLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(denomButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, keysTabLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(denomButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))
                            .addGroup(keysTabLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(denomButton50, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(keysTabLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(UnusedButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(denomButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(denomButton20, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(denomButton100, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(jToggleButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                        .addGap(10, 10, 10)
                        .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(jLabel19)
                            .addComponent(jLabel20)))
                    .addGroup(keysTabLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(freqBox, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel17)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(serialNoField, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                    .addGroup(keysTabLayout.createSequentialGroup()
                        .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(keysTabLayout.createSequentialGroup()
                                .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(oprNoField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(gpsLocXField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(gpsLocYField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                                    .addComponent(gpsHeadField, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 11, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, keysTabLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(seedDefaultsButton)))
                        .addGap(18, 18, 18)
                        .addComponent(SaveSeedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        keysTabLayout.setVerticalGroup(
            keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keysTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(keysTabLayout.createSequentialGroup()
                        .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(denomButton1)
                            .addComponent(denomButton5))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(keysTabLayout.createSequentialGroup()
                        .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(serialNoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(keysTabLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(oprNoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(gpsLocXField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel18))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(gpsLocYField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(gpsHeadField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel20))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, keysTabLayout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(denomButton10)
                                    .addComponent(denomButton20))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(denomButton50)
                                    .addComponent(denomButton100))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(UnusedButton1)
                                    .addComponent(jToggleButton6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 49, Short.MAX_VALUE)
                                .addGroup(keysTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(SaveSeedButton)
                                    .addComponent(freqBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel17)
                                    .addComponent(seedDefaultsButton))
                                .addContainerGap())))))
        );

        tabbedPane.addTab("Keys", keysTab);

        jLabel4.setText("Identifier:");

        jLabel5.setText("Password:");

        identifierField.setText("1887271c-ed5d-4c31-971e-aefcb8d83762");
        identifierField.setToolTipText("Blockchain.info identifier (username)");
        identifierField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                identifierFieldActionPerformed(evt);
            }
        });

        SaveLoginButton.setText("Save");
        SaveLoginButton.setToolTipText("Saves information to local file (same as the button on the Keys tab)");
        SaveLoginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveLoginButtonActionPerformed(evt);
            }
        });

        jLabel21.setText("Second Password:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Blockchain.info login info");

        bciPasswordField.setText("adafretvert");
        bciPasswordField.setToolTipText("Blockchain.info password");
        bciPasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bciPasswordFieldActionPerformed(evt);
            }
        });

        bciPasswordField2.setText("september");
        bciPasswordField2.setToolTipText("Blockchain.info second password");

        prototypeAccountButton.setText("Load Prototype Account");
        prototypeAccountButton.setToolTipText("Loads account information from the prototype Monroe Box");
        prototypeAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prototypeAccountButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout securityTabLayout = new javax.swing.GroupLayout(securityTab);
        securityTab.setLayout(securityTabLayout);
        securityTabLayout.setHorizontalGroup(
            securityTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(securityTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(securityTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(securityTabLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(securityTabLayout.createSequentialGroup()
                        .addGroup(securityTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(securityTabLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                                .addComponent(jLabel21))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, securityTabLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(securityTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(securityTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(identifierField, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                            .addComponent(bciPasswordField)
                            .addComponent(bciPasswordField2)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, securityTabLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(prototypeAccountButton)
                        .addGap(18, 18, 18)
                        .addComponent(SaveLoginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        securityTabLayout.setVerticalGroup(
            securityTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(securityTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(securityTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(identifierField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(securityTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(bciPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(securityTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(bciPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addGroup(securityTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SaveLoginButton)
                    .addComponent(prototypeAccountButton))
                .addContainerGap())
        );

        tabbedPane.addTab("Security", securityTab);

        backupButton2.setText("Save Backup");
        backupButton2.setToolTipText("Saves the generated keys to a local file");
        backupButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupButton2ActionPerformed(evt);
            }
        });

        jLabel24.setText("Multibit .key format: ");

        jLabel25.setText("Blockchain.info JSON format:");

        jLabel26.setText("Load backup: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addGap(75, 75, 75)
                        .addComponent(backupButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel25)
                    .addComponent(jLabel26))
                .addContainerGap(178, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(backupButton2))
                .addGap(18, 18, 18)
                .addComponent(jLabel25)
                .addGap(18, 18, 18)
                .addComponent(jLabel26)
                .addContainerGap(115, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Backup", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void openWebpage(URI uri) {
        Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
            try {
                desktop.browse(uri);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public static void openWebpage(URL url) {
        try {
            openWebpage(url.toURI());
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
    }

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        try {
            //Update Button
            //Clear table 
            DefaultTableModel dtm = (DefaultTableModel) keyTable.getModel();
            dtm.setRowCount(0);
            keyTable.setModel(dtm);
            dtm.setRowCount(500);
            keyTable.setModel(dtm);

            //Update table
            DecimalFormatSymbols decimalFormatSymbols = new DecimalFormatSymbols();
            decimalFormatSymbols.setDecimalSeparator('.');
            decimalFormatSymbols.setGroupingSeparator(',');
            //this format used for BTC value fields
            DecimalFormat btcFormat = new DecimalFormat("#,##0.00000", decimalFormatSymbols);
            //this format used for USD value fields
            DecimalFormat usdFormat = new DecimalFormat("#,##0.00", decimalFormatSymbols);
            String identifier = identifierField.getText();
            String password = bciPasswordField.getText();//TODO: make this a password field for better security
            String secondPassword = bciPasswordField2.getText();//TODO: make this a password field for better security
            BCI bci = new BCI(identifier, password, secondPassword);
            long balanceSatoshis = bci.walletBalance();
            double balanceBitcoins = balanceSatoshis / 100000000.0;
            balField.setText(btcFormat.format(balanceBitcoins));
            double usdRate = bci.rateCheck();
            double btcRate = 1.0 / usdRate;
            rateUsdField.setText(usdFormat.format(usdRate));
            rateBtcField.setText(btcFormat.format(btcRate));

            //check which denomination buttons are turned on.
            //also have a running total by value of all the denomination buttons turned on.
            int dollarsPerTimeslot = 0;
            int boxesOn = 0;
            if (denomButton1.isSelected()) {
                boxesOn += 1;
                dollarsPerTimeslot += 1;
            }
            if (denomButton5.isSelected()) {
                boxesOn += 1;
                dollarsPerTimeslot += 5;
            }
            if (denomButton10.isSelected()) {
                boxesOn += 1;
                dollarsPerTimeslot += 10;
            }
            if (denomButton20.isSelected()) {
                boxesOn += 1;
                dollarsPerTimeslot += 20;
            }
            if (denomButton50.isSelected()) {
                boxesOn += 1;
                dollarsPerTimeslot += 50;
            }
            if (denomButton100.isSelected()) {
                boxesOn += 1;
                dollarsPerTimeslot += 100;
            }
            int frequency = Integer.parseInt(freqBox.getSelectedItem().toString());
            int numberOfKeys = boxesOn * frequency;
            dtm.setRowCount(numberOfKeys);
            keyNoField.setText(String.valueOf(numberOfKeys));
            totValBTCField.setText(btcFormat.format(dollarsPerTimeslot * numberOfKeys * btcRate));
            totValUSDField.setText(usdFormat.format(dollarsPerTimeslot * numberOfKeys));

            //Generate keys
            List<BoxKey> boxkeys = new ArrayList();
            Seed seed = new Seed();
            //the following fields apply to all generated keys.
            seed.setCryptoCurrencyType(B58.hexStringToByteArray("0001")); //arbitrary 1 = BTC until ISO4217 is updated for Bitcoin
            seed.setFiatCurrencyType(B58.hexStringToByteArray("0348")); //840 = USD. see ISO4217 http://en.wikipedia.org/wiki/ISO_4217   
            seed.setGpsHeading(B58.hexStringToByteArray(gpsHeadField.getText()));
            seed.setGpsLocX(B58.hexStringToByteArray(gpsLocXField.getText()));
            seed.setGpsLocY(B58.hexStringToByteArray(gpsLocYField.getText()));
            seed.setOperatorNo(B58.hexStringToByteArray(oprNoField.getText()));
            seed.setSerialNo(B58.hexStringToByteArray(serialNoField.getText()));
            //System.out.println("seed serialNo: " + B58.convertToHexString(seed.getSerialNo()));

            //set the time field
            Date now = new Date();
            long utcDiv60 = (now.getTime() / 1000) / 60;
            timeField.setText(String.valueOf(utcDiv60 * 60));

            //set remaining fields in seed and add generated keys to arraylist
            double targBal_d = 0;
            byte denom = 0;
            for (int i = 0; i <= 59; i += 60 / frequency) {
                seed.setUtcDiv60(utcDiv60 + i);
                if (denomButton1.isSelected()) {
                    denom = 1;
                    seed.setDenom(denom);
                    targBal_d = btcRate * denom;
                    BoxKey boxkey = new BoxKey(seed, (long) (targBal_d * 100000000));
                    boxkeys.add(boxkey);
                    /*
                    for (int x=0; x<=seed.getSeed().length-1; x++)
                        System.out.print(seed.getSeed()[x]+" ");
                    System.out.println("");
                    */
                }
                if (denomButton5.isSelected()) {
                    denom = 5;
                    seed.setDenom(denom);
                    targBal_d = btcRate * denom;
                    BoxKey boxkey = new BoxKey(seed, (long) (targBal_d * 100000000));
                    boxkeys.add(boxkey);
                }
                if (denomButton10.isSelected()) {
                    denom = 10;
                    seed.setDenom(denom);
                    targBal_d = btcRate * denom;
                    BoxKey boxkey = new BoxKey(seed, (long) (targBal_d * 100000000));
                    boxkeys.add(boxkey);
                }
                if (denomButton20.isSelected()) {
                    denom = 20;
                    seed.setDenom(denom);
                    targBal_d = btcRate * denom;
                    BoxKey boxkey = new BoxKey(seed, (long) (targBal_d * 100000000));
                    boxkeys.add(boxkey);
                }
                if (denomButton50.isSelected()) {
                    denom = 50;
                    seed.setDenom(denom);
                    targBal_d = btcRate * denom;
                    BoxKey boxkey = new BoxKey(seed, (long) (targBal_d * 100000000));
                    boxkeys.add(boxkey);
                }
                if (denomButton100.isSelected()) {
                    denom = 100;
                    seed.setDenom(denom);
                    targBal_d = btcRate * denom;
                    BoxKey boxkey = new BoxKey(seed, (long) (targBal_d * 100000000));
                    boxkeys.add(boxkey);
                }
            }
            globalBoxkeys = boxkeys;//to pass to Send button

            //put keys in the table. 
            //Jtable only supports 100 rows, but this is changed to 500 in the constructor of this JFrame
            int row = 0;
            long bal;
            for (BoxKey bk : boxkeys) {
                keyTable.getModel().setValueAt(bk.getDenom(), row, 0);//set denomination
                keyTable.getModel().setValueAt(bk.getKey().getCreationTimeSeconds(), row, 1);//set time column
                keyTable.getModel().setValueAt(bk.getAddress(), row, 2);//set address
                keyTable.getModel().setValueAt(bk.getPrivateKey(), row, 3);//set private key
                bal = bk.getCurrentBalance();//grab wallet balance (satoshi unit)
                keyTable.getModel().setValueAt((bal / 100000000.0), row, 4);//change balance to BTC unit and set
                row++;
            }

        } catch (IOException ex) {
            Logger.getLogger(LabJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void SendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendButtonActionPerformed
        //backup before sending
        backupMultibitFormat();

        try {
            //Send button
            String identifier = identifierField.getText();
            String password = bciPasswordField.getText();
            String secondPassword = bciPasswordField2.getText();
            BCI bci = new BCI(identifier, password, secondPassword);

            //check if you have enough btc in the bci wallet
            double balance = Double.parseDouble(balField.getText());
            double required = Double.parseDouble(totValBTCField.getText());
            if (balance < required) {
                JOptionPane.showMessageDialog(null, "Insufficient funds.\nGenerated load-up address: " + bci.newAddress());
            } else if (balance == 0.0) {
                JOptionPane.showMessageDialog(null, "Zero balance.\nGenerated load-up address: " + bci.newAddress());
            } else {
                //send the funds
                List<BoxKey> boxkeys = globalBoxkeys;
                bci.sendmany(boxkeys);
            }
        } catch (IOException ex) {
            Logger.getLogger(LabJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_SendButtonActionPerformed

    private void denomButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_denomButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_denomButton1ActionPerformed

    private void oprNoFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oprNoFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_oprNoFieldActionPerformed

    private void gpsLocYFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gpsLocYFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gpsLocYFieldActionPerformed

    private void denomButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_denomButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_denomButton5ActionPerformed

    private void identifierFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_identifierFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_identifierFieldActionPerformed

    private void SaveLoginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveLoginButtonActionPerformed
        SaveSeedButtonActionPerformed(evt);
    }//GEN-LAST:event_SaveLoginButtonActionPerformed

    private void SaveSeedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveSeedButtonActionPerformed
        //Save button will copy seed fields and bci login info to text file
        //TODO: encrypt this information instead of just leaving it cleartext
        //TODO: encrupt password information stored in memory too.
        
        try {
            FileWriter fw = new FileWriter("config.txt");
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write("SERIALNO:" + serialNoField.getText());
            bw.newLine();
            bw.write("OPERATOR:" + oprNoField.getText());
            bw.newLine();
            bw.write("GPS LOCX:" + gpsLocXField.getText());
            bw.newLine();
            bw.write("GPS LOCY:" + gpsLocYField.getText());
            bw.newLine();
            bw.write("GPS HEAD:" + gpsHeadField.getText());
            bw.newLine();
            bw.write("BCIIDENT:" + identifierField.getText());
            bw.newLine();
            bw.write("BCIPASS1:" + bciPasswordField.getText());
            bw.newLine();
            bw.write("BCIPASS2:" + bciPasswordField2.getText());
            bw.newLine();

            bw.close();
        } catch (IOException ex) {
            Logger.getLogger(LabJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_SaveSeedButtonActionPerformed

    private void gpsLocXFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gpsLocXFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gpsLocXFieldActionPerformed

    private void prototypeAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prototypeAccountButtonActionPerformed
        identifierField.setText("1887271c-ed5d-4c31-971e-aefcb8d83762");
        bciPasswordField.setText("adafretvert");
        bciPasswordField2.setText("september");
    }//GEN-LAST:event_prototypeAccountButtonActionPerformed

    private void seedDefaultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seedDefaultsButtonActionPerformed
        serialNoField.setText("ff0154d4b792d4d69c62219f10");
        oprNoField.setText("ffffff");
        gpsLocXField.setText("ffffff");
        gpsLocYField.setText("ffffff");
        gpsHeadField.setText("ff");
    }//GEN-LAST:event_seedDefaultsButtonActionPerformed

    private void serialNoFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serialNoFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serialNoFieldActionPerformed

    private void backupButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupButton2ActionPerformed
        backupMultibitFormat();

    }//GEN-LAST:event_backupButton2ActionPerformed

    private void newAddrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAddrButtonActionPerformed
        try {
            String identifier = identifierField.getText();
            String password = bciPasswordField.getText();
            String secondPassword = bciPasswordField2.getText();
            BCI bci = new BCI(identifier, password, secondPassword);
            JOptionPane.showMessageDialog(null, "Send new funds to this address: " + bci.newAddress());
            //TODO: display a QR code using ZXing library or open a browser window to a blockchain.info page showing the address
        } catch (IOException ex) {
            Logger.getLogger(LabJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_newAddrButtonActionPerformed

    private void backupButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupButton1ActionPerformed
        backupMultibitFormat();
    }//GEN-LAST:event_backupButton1ActionPerformed

    private void bciPasswordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bciPasswordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bciPasswordFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LabJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LabJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LabJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LabJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LabJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SaveLoginButton;
    private javax.swing.JButton SaveSeedButton;
    private javax.swing.JButton SendButton;
    private javax.swing.JToggleButton UnusedButton1;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JButton backupButton1;
    private javax.swing.JButton backupButton2;
    private javax.swing.JLabel balField;
    private javax.swing.JTextField bciPasswordField;
    private javax.swing.JTextField bciPasswordField2;
    private javax.swing.JToggleButton denomButton1;
    private javax.swing.JToggleButton denomButton10;
    private javax.swing.JToggleButton denomButton100;
    private javax.swing.JToggleButton denomButton20;
    private javax.swing.JToggleButton denomButton5;
    private javax.swing.JToggleButton denomButton50;
    private javax.swing.JComboBox freqBox;
    private javax.swing.JTextField gpsHeadField;
    private javax.swing.JTextField gpsLocXField;
    private javax.swing.JTextField gpsLocYField;
    private javax.swing.JTextField identifierField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton6;
    private javax.swing.JLabel keyNoField;
    private javax.swing.JTable keyTable;
    private javax.swing.JPanel keysTab;
    private javax.swing.JButton newAddrButton;
    private javax.swing.JTextField oprNoField;
    private javax.swing.JButton prototypeAccountButton;
    private javax.swing.JLabel rateBtcField;
    private javax.swing.JLabel rateUsdField;
    private javax.swing.JPanel securityTab;
    private javax.swing.JButton seedDefaultsButton;
    private javax.swing.JTextField serialNoField;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel timeField;
    private javax.swing.JLabel totValBTCField;
    private javax.swing.JLabel totValUSDField;
    // End of variables declaration//GEN-END:variables

    private void backupMultibitFormat() {
        try {
            //TODO: Check existing backup file for duplicate rows before appending
            //TODO: make another backup option for BCI's JSON format.
            //TODO: make a method to import private keys to BCI through their JSON RPC APIs
            //TODO: Open a Save Dialog Box and save a backup of all the keys in the table.
            //Backup will match Multibit's .key format which is supported by BCI, though BCI has some bugs importing it
            /*
             # comment containing address, denomination, balance
             Private key, date and time
            
             example record
             # 1CAxHxBhwwjE6whh1oFYuium48KtMyKYRv,1, 0.0
             5KK9ZdQB4ZfsbktN5McZ5XWCQLU2FV7nwrtXgs7wXuPw9CqtiJY 2014-09-19T02:18:00Z
             */
            String filename = "MonroeLabBackup_" + timeField.getText() + ".key";
            FileWriter fw = new FileWriter(filename, true);
            BufferedWriter bw = new BufferedWriter(fw);
            int x = 0;
            for (int y = 0; y <= keyTable.getModel().getRowCount() - 1; y++) {//backing up all the rows in the JFrame's keytable
                if ((keyTable.getModel().getValueAt(y, x + 1)) == null)//break early if a null record has been reached.
                {
                    break;
                }
                long dateL = (long) keyTable.getModel().getValueAt(y, x + 1);
                Date dateD = new Date(dateL * 1000);
                TimeZone tz = TimeZone.getTimeZone("UTC");
                DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
                df.setTimeZone(tz);
                String date = df.format(dateD);
                bw.write(
                        "# " + keyTable.getModel().getValueAt(y, x + 2) + ","//address
                        + keyTable.getModel().getValueAt(y, x) + ", "//denom
                        + keyTable.getModel().getValueAt(y, x + 4)//balance
                );
                bw.newLine();
                bw.write(
                        keyTable.getModel().getValueAt(y, x + 3) + " "//key
                        + date //time
                );
                bw.newLine();
            }
            bw.close();

        } catch (IOException ex) {
            Logger.getLogger(LabJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadConfig() throws FileNotFoundException, IOException {
        FileReader fr = new FileReader("config.txt");
        BufferedReader br = new BufferedReader(fr);
        String line = br.readLine();
        String temp = "";
        for (int x = 9; x <= line.length()-1; x++) {
            temp = temp + line.charAt(x);
        }
        serialNoField.setText(temp);

        line = br.readLine();
        temp = "";
        for (int x = 9; x <= line.length()-1; x++) {
            temp = temp + line.charAt(x);
        }
        oprNoField.setText(temp);

        line = br.readLine();
        temp = "";
        for (int x = 9; x <= line.length()-1; x++) {
            temp = temp + line.charAt(x);
        }
        gpsLocXField.setText(temp);

        line = br.readLine();
        temp = "";
        for (int x = 9; x <= line.length()-1; x++) {
            temp = temp + line.charAt(x);
        }
        gpsLocYField.setText(temp);

        line = br.readLine();
        temp = "";
        for (int x = 9; x <= line.length()-1; x++) {
            temp = temp + line.charAt(x);
        }
        gpsHeadField.setText(temp);

        line = br.readLine();
        temp = "";
        for (int x = 9; x <= line.length()-1; x++) {
            temp = temp + line.charAt(x);
        }
        identifierField.setText(temp);

        line = br.readLine();
        temp = "";
        for (int x = 9; x <= line.length()-1; x++) {
            temp = temp + line.charAt(x);
        }
        bciPasswordField.setText(temp);

        line = br.readLine();
        temp = "";
        for (int x = 9; x <= line.length()-1; x++) {
            temp = temp + line.charAt(x);
        }
        bciPasswordField2.setText(temp);

        br.close();
    }

}
